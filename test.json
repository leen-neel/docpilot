{
  "apiName": "TaskManagerAPI",
  "version": "1.0.0",
  "description": "API for managing tasks and projects.",
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://staging.api.example.com/v1",
      "description": "Staging server"
    }
  ],
  "endpoints": [
    {
      "id": "getTasks",
      "path": "/tasks",
      "method": "GET",
      "summary": "Retrieve all tasks",
      "description": "Retrieves a list of all tasks. Supports filtering and pagination.",
      "tags": ["tasks"],
      "security": "apiKey",
      "headers": {
        "Accept": "application/json"
      },
      "queryParams": [
        {
          "name": "status",
          "type": "string",
          "required": false,
          "description": "Filter tasks by status (e.g., open, in progress, completed)",
          "default": null
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number for pagination",
          "default": 1
        },
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Maximum number of tasks per page",
          "default": 20
        }
      ],
      "pathParams": [],
      "request": {
        "required": false,
        "contentType": "application/json",
        "example": null
      },
      "responses": {
        "200": {
          "description": "Successful retrieval of tasks",
          "example": [
            {
              "id": "123",
              "title": "Implement feature X",
              "status": "in progress"
            },
            {
              "id": "456",
              "title": "Fix bug Y",
              "status": "open"
            }
          ]
        },
        "500": {
          "description": "Internal server error",
          "example": {
            "message": "Internal server error"
          }
        }
      }
    },
    {
      "id": "createTask",
      "path": "/tasks",
      "method": "POST",
      "summary": "Create a new task",
      "description": "Creates a new task with the provided details.",
      "tags": ["tasks"],
      "security": "apiKey",
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      "queryParams": [],
      "pathParams": [],
      "request": {
        "required": true,
        "contentType": "application/json",
        "example": {
          "title": "New Task",
          "description": "Details of the new task",
          "status": "open"
        }
      },
      "responses": {
        "201": {
          "description": "Task created successfully",
          "example": {
            "id": "789",
            "title": "New Task",
            "status": "open"
          }
        },
        "400": {
          "description": "Bad request - invalid input",
          "example": {
            "message": "Invalid input"
          }
        },
        "500": {
          "description": "Internal server error",
          "example": {
            "message": "Internal server error"
          }
        }
      }
    },
    {
      "id": "getTaskById",
      "path": "/tasks/{taskId}",
      "method": "GET",
      "summary": "Retrieve a task by ID",
      "description": "Retrieves a specific task based on its ID.",
      "tags": ["tasks"],
      "security": "apiKey",
      "headers": {
        "Accept": "application/json"
      },
      "queryParams": [],
      "pathParams": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "description": "The ID of the task to retrieve"
        }
      ],
      "request": {
        "required": false,
        "contentType": "application/json",
        "example": null
      },
      "responses": {
        "200": {
          "description": "Successful retrieval of task",
          "example": {
            "id": "789",
            "title": "Existing Task",
            "status": "in progress"
          }
        },
        "404": {
          "description": "Task not found",
          "example": {
            "message": "Task not found"
          }
        },
        "500": {
          "description": "Internal server error",
          "example": {
            "message": "Internal server error"
          }
        }
      }
    },
    {
      "id": "updateTask",
      "path": "/tasks/{taskId}",
      "method": "PUT",
      "summary": "Update an existing task",
      "description": "Updates an existing task with the provided details.",
      "tags": ["tasks"],
      "security": "apiKey",
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      "queryParams": [],
      "pathParams": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "description": "The ID of the task to update"
        }
      ],
      "request": {
        "required": true,
        "contentType": "application/json",
        "example": {
          "title": "Updated Task Title",
          "description": "Updated task details",
          "status": "completed"
        }
      },
      "responses": {
        "200": {
          "description": "Task updated successfully",
          "example": {
            "id": "789",
            "title": "Updated Task Title",
            "status": "completed"
          }
        },
        "400": {
          "description": "Bad request - invalid input",
          "example": {
            "message": "Invalid input"
          }
        },
        "404": {
          "description": "Task not found",
          "example": {
            "message": "Task not found"
          }
        },
        "500": {
          "description": "Internal server error",
          "example": {
            "message": "Internal server error"
          }
        }
      }
    },
    {
      "id": "deleteTask",
      "path": "/tasks/{taskId}",
      "method": "DELETE",
      "summary": "Delete a task",
      "description": "Deletes a task based on its ID.",
      "tags": ["tasks"],
      "security": "apiKey",
      "headers": {
        "Accept": "application/json"
      },
      "queryParams": [],
      "pathParams": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "description": "The ID of the task to delete"
        }
      ],
      "request": {
        "required": false,
        "contentType": "application/json",
        "example": null
      },
      "responses": {
        "204": {
          "description": "Task deleted successfully",
          "example": null
        },
        "404": {
          "description": "Task not found",
          "example": {
            "message": "Task not found"
          }
        },
        "500": {
          "description": "Internal server error",
          "example": {
            "message": "Internal server error"
          }
        }
      }
    }
  ],
  "sdkWrappers": [
    {
      "language": "typescript",
      "code": [
        "interface Task {",
        "  id: string;",
        "  title: string;",
        "  description?: string;",
        "  status: 'open' | 'in progress' | 'completed';",
        "}",
        "",
        "class TaskManager {",
        "  private baseUrl: string;",
        "  private apiKey: string;",
        "",
        "  constructor(baseUrl: string, apiKey: string) {",
        "    this.baseUrl = baseUrl;",
        "    this.apiKey = apiKey;",
        "  }",
        "",
        "  private async request<T>(url: string, method: string, body: any = null): Promise<T> {",
        "    const headers: HeadersInit = {",
        "      'Content-Type': 'application/json',",
        "      'Accept': 'application/json',",
        "      'X-API-Key': this.apiKey,",
        "    };",
        "",
        "    const options: RequestInit = {",
        "      method,",
        "      headers,",
        "      body: body ? JSON.stringify(body) : null,",
        "    };",
        "",
        "    const response = await fetch(url, options);",
        "",
        "    if (!response.ok) {",
        "      throw new Error(`HTTP error! Status: ${response.status}`);",
        "    }",
        "",
        "    return await response.json() as T;",
        "  }",
        "",
        "  async getTasks(status?: string, page: number = 1, limit: number = 20): Promise<Task[]> {",
        "    const url = new URL(`${this.baseUrl}/tasks`);",
        "    if (status) url.searchParams.append('status', status);",
        "    url.searchParams.append('page', page.toString());",
        "    url.searchParams.append('limit', limit.toString());",
        "    return this.request<Task[]>(url.toString(), 'GET');",
        "  }",
        "",
        "  async createTask(task: Omit<Task, 'id'>): Promise<Task> {",
        "    return this.request<Task>(`${this.baseUrl}/tasks`, 'POST', task);",
        "  }",
        "",
        "  async getTaskById(taskId: string): Promise<Task> {",
        "    return this.request<Task>(`${this.baseUrl}/tasks/${taskId}`, 'GET');",
        "  }",
        "",
        "  async updateTask(taskId: string, task: Omit<Task, 'id'>): Promise<Task> {",
        "    return this.request<Task>(`${this.baseUrl}/tasks/${taskId}`, 'PUT', task);",
        "  }",
        "",
        "  async deleteTask(taskId: string): Promise<void> {",
        "    await this.request<void>(`${this.baseUrl}/tasks/${taskId}`, 'DELETE');",
        "  }",
        "}",
        "",
        "// Example usage:",
        "// const taskManager = new TaskManager('https://api.example.com/v1', 'YOUR_API_KEY');",
        "// taskManager.getTasks().then(tasks => console.log(tasks));"
      ]
    }
  ]
}
