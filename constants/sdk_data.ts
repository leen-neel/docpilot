export const sdkLines = [
  "// TaskManagerSDK.ts",
  "",
  "export interface RegisterRequest {",
  "  email: string;",
  "  password: string;",
  "  name: string;",
  "}",
  "",
  "export interface RegisterResponse {",
  "  token: string;",
  "  expiresIn: number;",
  "}",
  "",
  "export interface Task {",
  "  id: string;",
  "  title: string;",
  "  status: string;",
  "  dueDate?: string;",
  "}",
  "",
  "export interface UpdateTaskRequest {",
  "  title?: string;",
  "  description?: string;",
  "  status?: string;",
  "  dueDate?: string;",
  "}",
  "",
  "export class ApiClient {",
  "  private baseUrl: string;",
  "  private token?: string;",
  "",
  "  constructor(baseUrl: string, token?: string) {",
  "    if (!baseUrl) {",
  '      throw new Error("Base URL is required");',
  "    }",
  "    this.baseUrl = baseUrl;",
  "    this.token = token;",
  "  }",
  "",
  "  setToken(token: string) {",
  "    this.token = token;",
  "  }",
  "",
  "  private buildHeaders(isJson = true): HeadersInit {",
  "    const headers: HeadersInit = {};",
  "    if (this.token) {",
  '      headers["Authorization"] = `Bearer ${this.token}`;',
  "    }",
  "    if (isJson) {",
  '      headers["Content-Type"] = "application/json";',
  "    }",
  "    return headers;",
  "  }",
  "",
  "  private buildQuery(params?: Record<string, any>): string {",
  '    if (!params) return "";',
  "    const query = Object.entries(params)",
  "      .filter(([_, v]) => v !== undefined && v !== null)",
  "      .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)",
  '      .join("&");',
  '    return query ? `?${query}` : "";',
  "  }",
  "",
  "  async register(data: RegisterRequest): Promise<RegisterResponse | null> {",
  "    if (!data?.email || !data?.password || !data?.name) {",
  '      throw new Error("Missing required registration fields");',
  "    }",
  "    try {",
  "      const res = await fetch(`${this.baseUrl}/auth/register`, {",
  '        method: "POST",',
  "        headers: this.buildHeaders(),",
  "        body: JSON.stringify(data),",
  "      });",
  "      if (!res.ok) {",
  "        throw new Error(`Failed to register: ${res.statusText}`);",
  "      }",
  "      return await res.json();",
  "    } catch (error) {",
  '      console.error("register error:", error);',
  "      return null;",
  "    }",
  "  }",
  "",
  "  async getTasks(params?: { status?: string; limit?: number; offset?: number }): Promise<Task[] | null> {",
  "    try {",
  "      const query = this.buildQuery(params);",
  "      const res = await fetch(`${this.baseUrl}/tasks${query}`, {",
  '        method: "GET",',
  "        headers: this.buildHeaders(false),",
  "      });",
  "      if (!res.ok) {",
  "        throw new Error(`Failed to fetch tasks: ${res.statusText}`);",
  "      }",
  "      return await res.json();",
  "    } catch (error) {",
  '      console.error("getTasks error:", error);',
  "      return null;",
  "    }",
  "  }",
  "",
  "  async updateTask(taskId: string, data: UpdateTaskRequest): Promise<Task | null> {",
  "    if (!taskId) {",
  '      throw new Error("Task ID is required");',
  "    }",
  "    if (!data || Object.keys(data).length === 0) {",
  '      throw new Error("Update data is required");',
  "    }",
  "    try {",
  "      const res = await fetch(`${this.baseUrl}/tasks/${encodeURIComponent(taskId)}`, {",
  '        method: "PATCH",',
  "        headers: this.buildHeaders(),",
  "        body: JSON.stringify(data),",
  "      });",
  "      if (!res.ok) {",
  "        throw new Error(`Failed to update task: ${res.statusText}`);",
  "      }",
  "      return await res.json();",
  "    } catch (error) {",
  '      console.error("updateTask error:", error);',
  "      return null;",
  "    }",
  "  }",
  "}",
];
